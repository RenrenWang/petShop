Object.defineProperty(exports, "__esModule", {
    value: true
});
var _jsxFileName = '/Volumes/work/reactnative/petShop/node_modules/rn-swipe-out/lib/Touchable.js';

var _react = require('react');

var _react2 = babelHelpers.interopRequireDefault(_react);

var _reactNative = require('react-native');

var Touchable = function (_React$Component) {
    babelHelpers.inherits(Touchable, _React$Component);

    function Touchable() {
        var _ref2;

        var _temp, _this, _ret;

        babelHelpers.classCallCheck(this, Touchable);

        for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
        }

        return _ret = (_temp = (_this = babelHelpers.possibleConstructorReturn(this, (_ref2 = Touchable.__proto__ || Object.getPrototypeOf(Touchable)).call.apply(_ref2, [this].concat(args))), _this), _initialiseProps.call(_this), _temp), babelHelpers.possibleConstructorReturn(_this, _ret);
    }

    babelHelpers.createClass(Touchable, [{
        key: 'render',
        value: function render() {
            var _this2 = this;

            return _react2.default.createElement(
                _reactNative.View,
                babelHelpers.extends({ ref: function ref(_ref) {
                        return _this2._setRef(_ref);
                    }, style: this.props.style }, _reactNative.PanResponder.create(babelHelpers.extends({}, this.props.panResponderObject, this._panResponderObject)).panHandlers, {
                    __source: {
                        fileName: _jsxFileName,
                        lineNumber: 113
                    }
                }),
                this.props.children
            );
        }
    }]);
    return Touchable;
}(_react2.default.Component);

var _initialiseProps = function _initialiseProps() {
    var _this3 = this;

    this._timestamp = -1;
    this._timer = 0;
    this._ref = null;

    this._setRef = function (ref) {
        _this3._ref = ref;
    };

    this._flatStyle = _reactNative.StyleSheet.flatten(this.props.style);

    this._setActiveOpacity = function () {
        if (_this3._ref) {
            _this3._ref.setNativeProps({
                style: {
                    opacity: _this3.props.activeOpacity
                }
            });
        }
    };

    this._recoverByActiveOpacity = function () {
        if (_this3._ref) {
            _this3._ref.setNativeProps({
                style: {
                    opacity: _this3._flatStyle.opacity ? _this3._flatStyle.opacity : 1
                }
            });
        }
    };

    this._setUnderlayColor = function () {
        if (_this3.props.underlayColor && _this3._ref) {
            _this3._ref.setNativeProps({
                style: {
                    backgroundColor: _this3.props.underlayColor
                }
            });
        }
    };

    this._recoverByUnderlayColor = function () {
        if (_this3._ref) {
            _this3._ref.setNativeProps({
                style: {
                    backgroundColor: _this3._flatStyle.backgroundColor || 'transparent'
                }
            });
        }
    };

    this._onPress = function () {
        var _props;

        (_props = _this3.props).onPress.apply(_props, arguments);
    };

    this._onPressIn = function () {
        var _props2;

        _this3._setActiveOpacity();
        _this3._setUnderlayColor();
        (_props2 = _this3.props).onPressIn.apply(_props2, arguments);
    };

    this._onPressOut = function () {
        var _props3;

        _this3._recoverByActiveOpacity();
        _this3._recoverByUnderlayColor();
        (_props3 = _this3.props).onPressOut.apply(_props3, arguments);
    };

    this._onLongPress = function () {
        var _props4;

        (_props4 = _this3.props).onLongPress.apply(_props4, arguments);
    };

    this._panResponderObject = {
        onStartShouldSetPanResponder: function onStartShouldSetPanResponder() {
            return true;
        },
        onMoveShouldSetPanResponder: function onMoveShouldSetPanResponder() {
            return true;
        },
        onPanResponderGrant: function onPanResponderGrant(event, gestureState) {
            _this3._timestamp = event.timeStamp;
            _this3._onPressIn(event, gestureState);
            clearInterval(_this3._timer);
            _this3._timer = setTimeout(function () {
                if (_this3._timestamp !== -1) {
                    _this3._onLongPress && _this3._onLongPress(event, gestureState);
                }
            }, 500);
        },
        onPanResponderRelease: function onPanResponderRelease(event, gestureState) {
            if (Math.abs(gestureState.dx) < 5 && Math.abs(gestureState.vx) < 0.1) {
                if (event.timeStamp - _this3._timestamp < 300) {
                    _this3._onPress(event, gestureState);
                }
            }
            setTimeout(function () {
                return _this3._onPressOut(event, gestureState);
            }, 10);
            _this3._timestamp = -1;
        }
    };
};

Touchable.propTypes = {
    style: _reactNative.View.propTypes.style,
    activeOpacity: _react2.default.PropTypes.number,
    underlayColor: _react2.default.PropTypes.string,
    onPressIn: _react2.default.PropTypes.func,
    onPress: _react2.default.PropTypes.func,
    onPressOut: _react2.default.PropTypes.func,
    onLongPress: _react2.default.PropTypes.func
};

Touchable.defaultProps = {
    activeOpacity: 1,
    underlayColor: '',
    onPressIn: function onPressIn() {},
    onPress: function onPress() {},
    onPressOut: function onPressOut() {},
    onLongPress: function onLongPress() {}
};

exports.default = Touchable;