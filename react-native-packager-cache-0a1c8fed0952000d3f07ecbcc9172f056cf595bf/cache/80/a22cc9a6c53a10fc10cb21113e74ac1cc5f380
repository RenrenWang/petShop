Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.Touchable = undefined;
var _jsxFileName = '/Volumes/work/reactnative/petShop/node_modules/rn-swipe-out/lib/index.js';

var _react = require('react');

var _react2 = babelHelpers.interopRequireDefault(_react);

var _reactNative = require('react-native');

var _util = require('./util');

var _state = require('./state');

var _Touchable = require('./Touchable');

var _Touchable2 = babelHelpers.interopRequireDefault(_Touchable);

var Swipeout = function (_React$Component) {
    babelHelpers.inherits(Swipeout, _React$Component);

    function Swipeout() {
        var _ref;

        var _temp, _this, _ret;

        babelHelpers.classCallCheck(this, Swipeout);

        for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
        }

        return _ret = (_temp = (_this = babelHelpers.possibleConstructorReturn(this, (_ref = Swipeout.__proto__ || Object.getPrototypeOf(Swipeout)).call.apply(_ref, [this].concat(args))), _this), _this.state = {
            left: [],

            leftWidth: 0,

            leftActionThreshold: 0,

            right: [],

            rightWidth: 0,

            rightActionThreshold: 0,

            snapVelocity: 0.3,

            interpolation: {}
        }, _this.panAnimValue = 0, _this.panAnim = new _reactNative.Animated.Value(_this.panAnimValue), _this.panResponderObject = {
            onStartShouldSetPanResponder: function onStartShouldSetPanResponder() {
                return true;
            },
            onMoveShouldSetPanResponder: function onMoveShouldSetPanResponder() {
                return true;
            },
            onPanResponderMove: function onPanResponderMove(event, gestureState) {
                _this.panAnim.setValue(_this.panAnimValue + gestureState.dx);
            },
            onPanResponderEnd: function onPanResponderEnd(event, gestureState) {
                _this.onPanResponderEndTrans(event, gestureState);
            },
            onPanResponderTerminate: function onPanResponderTerminate(event, gestureState) {
                _this.onPanResponderEndTrans(event, gestureState);
            },
            onPanResponderTerminationRequest: function onPanResponderTerminationRequest(event, gestureState) {
                return true;
            },
            onShouldBlockNativeResponder: function onShouldBlockNativeResponder(event, gestureState) {
                return false;
            }
        }, _this.panHandlers = _reactNative.PanResponder.create(_this.panResponderObject).panHandlers, _this.onPanResponderEndTrans = function (event, gestureState) {
            _this.panAnimValue += gestureState.dx;

            if (_this.panAnimValue <= _this.state.leftActionThreshold && _this.panAnimValue >= -_this.state.rightActionThreshold) {
                if (gestureState.vx >= _this.state.snapVelocity) {
                    if (_this.panAnimValue <= 0) {
                        _this.performAnimation(0);
                    } else {
                        _this.performAnimation(_this.state.leftWidth);
                    }
                } else if (gestureState.vx < -_this.state.snapVelocity) {
                    if (_this.panAnimValue > 0) {
                        _this.performAnimation(0);
                    } else {
                        _this.performAnimation(-_this.state.rightWidth);
                    }
                } else {
                    _this.performAnimation(0);
                }
            } else if (_this.panAnimValue < -_this.state.rightActionThreshold) {
                if (gestureState.vx >= _this.state.snapVelocity) {
                    _this.performAnimation(0);
                } else {
                    _this.performAnimation(-_this.state.rightWidth);
                }
            } else if (_this.panAnimValue > _this.state.leftActionThreshold) {
                if (gestureState.vx < -_this.state.snapVelocity) {
                    _this.performAnimation(0);
                } else {
                    _this.performAnimation(_this.state.leftWidth);
                }
            }
        }, _this.performAnimation = function () {
            var value = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 0;

            var cachePanAnimValue = _this.panAnimValue;
            _this.panAnimValue = value;

            _reactNative.Animated.timing(_this.panAnim, {
                toValue: value,
                duration: 300,
                easing: _reactNative.Easing.out(_reactNative.Easing.cubic),
                useNativeDriver: true
            }).start(function () {
                if (value > 0) {
                    _this.props.onOpen('left');
                } else if (value < 0) {
                    _this.props.onOpen('right');
                } else if (value === 0) {
                    if (cachePanAnimValue > 0) {
                        _this.props.onClose('left');
                    } else if (cachePanAnimValue < 0) {
                        _this.props.onClose('right');
                    }
                }
            });
        }, _this.onPressOption = function (v) {
            v.onPress && v.onPress(v, _this.panAnim);
            _this.performAnimation(0);
        }, _this.onPressInOption = function (v) {
            v.onPressIn && v.onPressIn(v, _this.panAnim);
        }, _this.onPressOutOption = function (v) {
            v.onPressOut && v.onPressOut(v, _this.panAnim);
        }, _this.onLongPressOption = function (v) {
            v.onLongPress && v.onLongPress(v, _this.panAnim);
        }, _this.onPressChildren = function (i) {
            _this.panAnimValue === 0 && _this.props.onPress(i, _this.panAnim);
            _this.performAnimation(0);
        }, _this.onPressInChildren = function (i) {
            _this.panAnimValue === 0 && _this.props.onPressIn(i, _this.panAnim);
        }, _this.onPressOutChildren = function (i) {
            _this.panAnimValue === 0 && _this.props.onPressOut(i, _this.panAnim);
        }, _this.onLongPressChildren = function (i) {
            _this.panAnimValue === 0 && _this.props.onLongPress(i, _this.panAnim);
        }, _this.renderLeftOptions = function (options) {
            return _react2.default.createElement(
                _reactNative.Animated.View,
                { style: [styles.optionWrapper, {
                        left: -_this.state.leftWidth,
                        width: _this.state.leftWidth,
                        transform: [{
                            translateX: _this.panAnim.interpolate(_this.state.interpolation.left)
                        }]
                    }], __source: {
                        fileName: _jsxFileName,
                        lineNumber: 202
                    }
                },
                options.map(function (v, i) {
                    return v && _this.renderCommonOption(v, i);
                })
            );
        }, _this.renderRightOptions = function (options) {
            return _react2.default.createElement(
                _reactNative.Animated.View,
                { style: [styles.optionWrapper, {
                        right: -_this.state.rightWidth,
                        width: _this.state.rightWidth,
                        transform: [{
                            translateX: _this.panAnim.interpolate(_this.state.interpolation.right)
                        }]
                    }], __source: {
                        fileName: _jsxFileName,
                        lineNumber: 218
                    }
                },
                options.map(function (v, i) {
                    return v && _this.renderCommonOption(v, i);
                })
            );
        }, _this.renderCommonOption = function (option, index) {
            var optionStyle = void 0,
                filterBackGroundColorStyle = void 0;
            if (option.style) {
                optionStyle = _reactNative.StyleSheet.flatten(option.style);
                filterBackGroundColorStyle = (0, _util.filterBackGroundColor)(optionStyle);
            }
            if (typeof option.component === 'function') {
                return _react2.default.createElement(option.component, { key: index, hide: function hide() {
                        return _this.performAnimation(0);
                    }, animatedValue: _this.panAnim, __source: {
                        fileName: _jsxFileName,
                        lineNumber: 240
                    }
                });
            }
            return _react2.default.createElement(
                _Touchable2.default,
                {
                    panResponderObject: _this.panResponderObject,
                    onPress: function onPress() {
                        return _this.onPressOption(option);
                    },
                    onPressIn: function onPressIn() {
                        return _this.onPressInOption(option);
                    },
                    onPressOut: function onPressOut() {
                        return _this.onPressOutOption(option);
                    },
                    onLongPress: function onLongPress() {
                        return _this.onLongPressOption(option);
                    },
                    underlayColor: option.underlayColor,
                    activeOpacity: option.activeOpacity,
                    style: [styles.option, optionStyle && optionStyle.backgroundColor && { backgroundColor: optionStyle.backgroundColor }, index === 0 && { borderLeftWidth: 0 }],
                    key: index,
                    __source: {
                        fileName: _jsxFileName,
                        lineNumber: 244
                    }
                },
                _react2.default.createElement(
                    _reactNative.Text,
                    { style: [styles.text, filterBackGroundColorStyle], __source: {
                            fileName: _jsxFileName,
                            lineNumber: 259
                        }
                    },
                    option.text
                )
            );
        }, _this.renderChildren = function (children, key) {
            return _react2.default.createElement(
                _reactNative.Animated.View,
                { key: key, style: [styles.flexGrow, {
                        transform: [{
                            translateX: _this.state.left.length === 0 && _this.state.right.length === 0 ? 0 : _this.panAnim.interpolate(_this.state.interpolation.children)
                        }]
                    }], __source: {
                        fileName: _jsxFileName,
                        lineNumber: 266
                    }
                },
                _react2.default.createElement(
                    _Touchable2.default,
                    { style: [styles.flexGrow, (0, _util.filterContainerStyle)(_this.props.style)],
                        panResponderObject: _this.panResponderObject,
                        onPress: function onPress() {
                            return _this.onPressChildren(key);
                        },
                        onPressIn: function onPressIn() {
                            return _this.onPressInChildren(key);
                        },
                        onPressOut: function onPressOut() {
                            return _this.onPressOutChildren(key);
                        },
                        onLongPress: function onLongPress() {
                            return _this.onLongPressChildren(key);
                        },
                        underlayColor: _this.props.underlayColor,
                        activeOpacity: _this.props.activeOpacity,
                        __source: {
                            fileName: _jsxFileName,
                            lineNumber: 272
                        }
                    },
                    children
                )
            );
        }, _temp), babelHelpers.possibleConstructorReturn(_this, _ret);
    }

    babelHelpers.createClass(Swipeout, [{
        key: 'componentWillMount',
        value: function componentWillMount() {
            this.setState(_state.setOptions);
            this.setState(_state.setOptionsWidth);
            this.setState(_state.setActionThreshold);
            this.setState(_state.setSnapVelocity);
            this.setState(_state.setInterpolation);
        }
    }, {
        key: 'render',
        value: function render() {
            var _this2 = this;

            return _react2.default.createElement(
                _reactNative.View,
                { style: [styles.container, (0, _util.filterSelfStyle)(this.props.style)], __source: {
                        fileName: _jsxFileName,
                        lineNumber: 297
                    }
                },
                this.state.left.length > 0 ? this.renderLeftOptions(this.state.left) : null,
                this.state.right.length > 0 ? this.renderRightOptions(this.state.right) : null,
                (0, _util.toArray)(this.props.children).map(function (v, i) {
                    return _this2.renderChildren(v, i);
                })
            );
        }
    }]);
    return Swipeout;
}(_react2.default.Component);

Swipeout.propTypes = {
    style: _reactNative.View.propTypes.style,
    left: _react2.default.PropTypes.oneOfType([_react2.default.PropTypes.object, _react2.default.PropTypes.array]),
    right: _react2.default.PropTypes.oneOfType([_react2.default.PropTypes.object, _react2.default.PropTypes.array]),
    snapVelocity: _react2.default.PropTypes.number,
    optionWidth: _react2.default.PropTypes.number,
    actionThreshold: _react2.default.PropTypes.number,
    useNativeDriver: _react2.default.PropTypes.bool,
    onPress: _react2.default.PropTypes.func,
    onPressIn: _react2.default.PropTypes.func,
    onPressOut: _react2.default.PropTypes.func,
    onLongPress: _react2.default.PropTypes.func,
    onOpen: _react2.default.PropTypes.func,
    onClose: _react2.default.PropTypes.func,
    underlayColor: _react2.default.PropTypes.string,
    activeOpacity: _react2.default.PropTypes.number,

    leftActionThreshold: _react2.default.PropTypes.number,
    rightActionThreshold: _react2.default.PropTypes.number
};

Swipeout.defaultProps = {
    style: {},
    left: [],
    right: [],
    snapVelocity: 0.3,
    optionWidth: 64,
    actionThreshold: 0.5,
    useNativeDriver: true,
    onPress: _util.emptyFn,
    onPressIn: _util.emptyFn,
    onPressOut: _util.emptyFn,
    onLongPress: _util.emptyFn,
    onOpen: _util.emptyFn,
    onClose: _util.emptyFn,
    underlayColor: '',
    activeOpacity: 1
};

Swipeout.Touchable = _Touchable2.default;

var styles = _reactNative.StyleSheet.create({
    flexGrow: {
        flexGrow: 1
    },
    container: {
        position: 'relative',
        overflow: 'hidden'
    },
    optionWrapper: {
        position: 'absolute',
        top: 0,
        bottom: 0,
        flexDirection: 'row'
    },
    option: {
        flex: 1,
        position: 'relative',
        backgroundColor: 'red',
        justifyContent: 'center',
        alignItems: 'center',
        borderColor: '#fff',
        borderLeftWidth: _reactNative.StyleSheet.hairlineWidth
    },
    text: {
        fontSize: 14,
        color: '#fff',
        textAlign: 'center'
    }
});

exports.default = Swipeout;
exports.Touchable = _Touchable2.default;