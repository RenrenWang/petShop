Object.defineProperty(exports, "__esModule", {
  value: true
});
var _jsxFileName = '/Volumes/work/reactnative/petShop/js/components/MyListView.js';

var _react = require('react');

var _react2 = babelHelpers.interopRequireDefault(_react);

var _reactNative = require('react-native');

var _lodash = require('lodash');

var _lodash2 = babelHelpers.interopRequireDefault(_lodash);

var _ListItem = require('./ListItem');

var _ListItem2 = babelHelpers.interopRequireDefault(_ListItem);

var _HomeListItem = require('./HomeListItem');

var _HomeListItem2 = babelHelpers.interopRequireDefault(_HomeListItem);

var _StyleConfig = require('../base/StyleConfig');

var _StyleConfig2 = babelHelpers.interopRequireDefault(_StyleConfig);

var _ListTWoRow = require('./ListTWoRow');

var _ListTWoRow2 = babelHelpers.interopRequireDefault(_ListTWoRow);

var _LoadingImg = require('./LoadingImg');

var _LoadingImg2 = babelHelpers.interopRequireDefault(_LoadingImg);

var _Dimensions$get = _reactNative.Dimensions.get('window'),
    width = _Dimensions$get.width,
    height = _Dimensions$get.height;

var ITEMHEIGHT = 110;

var MyListView = function (_React$Component) {
  babelHelpers.inherits(MyListView, _React$Component);

  function MyListView(props, context) {
    babelHelpers.classCallCheck(this, MyListView);

    var _this = babelHelpers.possibleConstructorReturn(this, (MyListView.__proto__ || Object.getPrototypeOf(MyListView)).call(this, props, context));

    _this._data = [];
    _this.ds = new _reactNative.ListView.DataSource({ rowHasChanged: function rowHasChanged(r1, r2) {
        return r1 !== r2;
      } });
    _this.page = 1;

    _this.state = {

      dataSource: _this.ds.cloneWithRows(_this._data),
      isShowLoadIcon: true,
      footerText: "加载中...",
      httpError: false,
      isRefreshing: false,
      showTop: false,
      isLoading: false,
      retunrTopPosition: -35,
      isFirst: true,
      noDate: false
    };
    _this._renderFooter = _this._renderFooter.bind(_this);
    return _this;
  }

  babelHelpers.createClass(MyListView, [{
    key: 'componentDidMount',
    value: function componentDidMount() {

      this.getData();
    }
  }, {
    key: 'componentWillReceiveProps',
    value: function componentWillReceiveProps(nextProps) {

      if (this.props.url != nextProps.url) {
        this._data = [];
        this.setState({
          dataSource: this.ds.cloneWithRows(this._data),

          footerText: "加载中...",

          isRefreshing: false,
          isFirst: true,
          noDate: false,
          httpError: false
        });
        this.page = 1;
      }
    }
  }, {
    key: 'componentDidUpdate',
    value: function componentDidUpdate(prevProps, prevState) {

      if (prevProps.url != this.props.url) {

        this.getData();
      }
    }
  }, {
    key: '_onScroll',
    value: function _onScroll(event) {
      var scrollView = event.nativeEvent;
      var y = scrollView.contentOffset.y;

      this.setState({
        retunrTopPosition: y > height ? 25 : -35
      });
    }
  }, {
    key: 'returnTop',
    value: function returnTop() {
      var _this2 = this;

      return _react2.default.createElement(
        _reactNative.TouchableOpacity,
        {
          onPress: function onPress() {
            _this2.listView.scrollTo({ y: 0, animated: true });
          },

          style: { position: 'absolute', right: 10, bottom: this.state.retunrTopPosition, zIndex: 9999 },
          __source: {
            fileName: _jsxFileName,
            lineNumber: 98
          }
        },
        _react2.default.createElement(_reactNative.Image, { style: { tintColor: '#bbb', height: 32, width: 42 }, source: require('../static/images/toTop.png'), __source: {
            fileName: _jsxFileName,
            lineNumber: 106
          }
        })
      );
    }
  }, {
    key: 'render',
    value: function render() {
      var _this3 = this;

      return _react2.default.createElement(
        _reactNative.View,
        { style: { flex: 1, position: 'relative' }, __source: {
            fileName: _jsxFileName,
            lineNumber: 121
          }
        },
        this.props.isReturnTopthis ? this.returnTop() : null,
        _react2.default.createElement(_reactNative.ListView, babelHelpers.extends({
          ref: function ref(listView) {
            return _this3.listView = listView;
          },
          initialListSize: 8,

          onScroll: _lodash2.default.debounce(this._onScroll.bind(this), 500, {
            'leading': true,
            'trailing': false
          }),
          dataSource: this.state.dataSource
        }, this.props, {

          renderRow: function renderRow(item, sectionId, rowId) {
            if (_this3.props.itemType == 2) {
              return _this3._renderRow_2(item, sectionId, rowId);
            } else if (_this3.props.itemType == 3) {
              return _this3._renderRow_3(item, sectionId, rowId);
            } else {
              return _this3._renderRow(item, sectionId, rowId);
            }
          },
          onEndReachedThreshold: ITEMHEIGHT * 2,
          onEndReached: this._onEndReached.bind(this),

          style: styles.container,
          pageSize: 3,
          enableEmptySections: true,
          renderFooter: function renderFooter() {
            return _this3._renderFooter();
          },
          renderSeparator: function renderSeparator(sectionID, rowID, adjacentRowHighlighted) {
            return _this3.props.separatorType == 2 ? _this3._renderSeparator_2() : _this3._renderSeparator();
          },
          __source: {
            fileName: _jsxFileName,
            lineNumber: 125
          }
        }))
      );
    }
  }, {
    key: 'getData',
    value: function getData() {
      var _this4 = this;

      if (!this.state.noDate) {
        this.setState({
          isLoading: true
        });
        fetch(this.props.url + '&pageno=' + this.page++).then(function (response) {
          return response.json();
        }).then(function (responseJson) {
          if (responseJson.result == "fail" || responseJson.data.length <= 0 && responseJson.data) {
            return _this4.setState({
              dataSource: _this4.ds.cloneWithRows(_this4._data),

              isFirst: false,
              isLoading: false,
              noDate: true,
              footerText: _this4.state.isFirst ? "暂无数据" : "已加载全部数据"
            });
          }

          _this4._data = _this4._data.concat(responseJson.data);
          _this4.setState({
            dataSource: _this4.ds.cloneWithRows(_this4._data),

            isFirst: false,
            isLoading: false,
            noDate: responseJson.maxpage < _this4.page ? true : false,
            footerText: responseJson.maxpage < _this4.page ? "已加载全部数据" : "加载中..."

          });
        }).catch(function (error) {
          console.log(error);

          _this4._data = [];
          _this4.setState({
            dataSource: _this4.ds.cloneWithRows(_this4._data),
            isFirst: false,
            noDate: true,
            footerText: "网络加载失败，请稍后重试...",
            isLoading: false,
            httpError: true
          });
        });
      }
    }
  }, {
    key: '_renderSeparator',
    value: function _renderSeparator(sectionID, rowID, adjacentRowHighlighted) {
      return _react2.default.createElement(_reactNative.View, { style: { height: 1, backgroundColor: '#eeeeee' }, key: rowID, __source: {
          fileName: _jsxFileName,
          lineNumber: 218
        }
      });
    }
  }, {
    key: '_renderSeparator_2',
    value: function _renderSeparator_2(sectionID, rowID, adjacentRowHighlighted) {
      return _react2.default.createElement(_reactNative.View, { style: { height: 10, backgroundColor: '#eeeeee' }, key: rowID, __source: {
          fileName: _jsxFileName,
          lineNumber: 221
        }
      });
    }
  }, {
    key: '_renderFooter',
    value: function _renderFooter() {
      return _react2.default.createElement(
        _reactNative.View,
        { style: { width: width, paddingVertical: 10, alignItems: 'center', flexDirection: 'row', justifyContent: 'center' }, __source: {
            fileName: _jsxFileName,
            lineNumber: 224
          }
        },
        _react2.default.createElement(
          _reactNative.Text,
          {
            __source: {
              fileName: _jsxFileName,
              lineNumber: 225
            }
          },
          this.state.footerText
        )
      );
    }
  }, {
    key: '_onEndReached',
    value: function _onEndReached() {

      if (!this.state.noDate && !this.state.isFirst) {
        console.log("到底执行" + this.page);
        this.getData();
      }
    }
  }, {
    key: '_onRefresh',
    value: function _onRefresh() {
      this.setState({ isRefreshing: true });
      this.getData();
    }
  }, {
    key: '_renderRow',
    value: function _renderRow(item, sectionID, rowId) {
      return _react2.default.createElement(_ListItem2.default, { itemHeight: ITEMHEIGHT, typeItem: this.props.typeItem ? this.props.typeItem : null, navigation: this.props.navigation, item: item, __source: {
          fileName: _jsxFileName,
          lineNumber: 245
        }
      });
    }
  }, {
    key: '_renderRow_2',
    value: function _renderRow_2(item, sectionID, rowId) {
      return _react2.default.createElement(_HomeListItem2.default, { itemHeight: 120, index: rowId, item: item, navigation: this.props.navigation, __source: {
          fileName: _jsxFileName,
          lineNumber: 250
        }
      });
    }
  }, {
    key: '_renderRow_3',
    value: function _renderRow_3(item, sectionID, rowId) {
      return _react2.default.createElement(_ListTWoRow2.default, { classId: this.props.classId && this.props.classId == "CW" ? this.props.classId : false, itemHeight: ITEMHEIGHT, listItemBgColor: this.props.listItemBgColor, navigation: this.props.navigation, index: rowId, item: item, __source: {
          fileName: _jsxFileName,
          lineNumber: 254
        }
      });
    }
  }]);
  return MyListView;
}(_react2.default.Component);

exports.default = MyListView;


var styles = _reactNative.StyleSheet.create({
  container: {
    flex: 1,

    flexDirection: 'column',
    backgroundColor: "#eeeeee"

  },
  button: {
    padding: 20,
    borderStyle: 'solid',
    borderWidth: 1,
    borderColor: 'black'
  },
  row: {
    padding: 4
  }
});