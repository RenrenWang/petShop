Object.defineProperty(exports, "__esModule", {
  value: true
});
var _jsxFileName = '/Volumes/work/reactnative/petShop/node_modules/react_native_countdowntimer/CountDownReact.js';

var _react = require('react');

var _react2 = babelHelpers.interopRequireDefault(_react);

var _reactNative = require('react-native');

var styles = _reactNative.StyleSheet.create({
  cardItemTimeRemainTxt: {
    fontSize: 20,
    color: '#ee394b'
  },
  text: {
    fontSize: 30,
    color: '#FFF',
    marginLeft: 7
  },
  container: {
    flexDirection: 'row'
  },

  defaultTime: {
    paddingHorizontal: 3,
    backgroundColor: 'rgba(85, 85, 85, 1)',
    fontSize: 12,
    color: 'white',
    marginHorizontal: 3,
    borderRadius: 2
  },

  defaultColon: {
    fontSize: 12, color: 'rgba(85, 85, 85, 1)'
  }
});

var CountDown = function (_Component) {
  babelHelpers.inherits(CountDown, _Component);

  function CountDown() {
    var _ref;

    var _temp, _this, _ret;

    babelHelpers.classCallCheck(this, CountDown);

    for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    return _ret = (_temp = (_this = babelHelpers.possibleConstructorReturn(this, (_ref = CountDown.__proto__ || Object.getPrototypeOf(CountDown)).call.apply(_ref, [this].concat(args))), _this), _this.state = {
      days: 0,
      hours: 0,
      min: 0,
      sec: 0
    }, _temp), babelHelpers.possibleConstructorReturn(_this, _ret);
  }

  babelHelpers.createClass(CountDown, [{
    key: 'componentDidMount',
    value: function componentDidMount() {
      var _this2 = this;

      this.interval = setInterval(function () {
        var date = _this2.getDateData(_this2.props.date);
        if (date) {
          _this2.setState(date);
        } else {
          _this2.stop();
          _this2.props.onEnd();
        }
      }, 1000);
    }
  }, {
    key: 'componentWillMount',
    value: function componentWillMount() {
      var date = this.getDateData(this.props.date);
      if (date) {
        this.setState(date);
      }
    }
  }, {
    key: 'componentWillUnmount',
    value: function componentWillUnmount() {
      this.stop();
    }
  }, {
    key: 'getDateData',
    value: function getDateData(endDate) {
      var diff = (Date.parse(new Date(endDate)) - Date.parse(new Date())) / 1000;

      if (diff <= 0) {
        return false;
      }

      var timeLeft = {
        years: 0,
        days: 0,
        hours: 0,
        min: 0,
        sec: 0,
        millisec: 0
      };

      if (diff >= 365.25 * 86400) {
        timeLeft.years = Math.floor(diff / (365.25 * 86400));
        diff -= timeLeft.years * 365.25 * 86400;
      }
      if (diff >= 86400) {
        timeLeft.days = Math.floor(diff / 86400);
        diff -= timeLeft.days * 86400;
      }
      if (diff >= 3600) {
        timeLeft.hours = Math.floor(diff / 3600);
        diff -= timeLeft.hours * 3600;
      }
      if (diff >= 60) {
        timeLeft.min = Math.floor(diff / 60);
        diff -= timeLeft.min * 60;
      }
      timeLeft.sec = diff;
      return timeLeft;
    }
  }, {
    key: 'render',
    value: function render() {
      var countDown = this.state;
      var days = void 0;
      if (countDown.days === 1) {
        days = this.props.days.singular;
      } else {
        days = this.props.days.plural;
      }
      return _react2.default.createElement(
        _reactNative.View,
        { style: this.props.containerStyle, __source: {
            fileName: _jsxFileName,
            lineNumber: 161
          }
        },
        countDown.days > 0 ? _react2.default.createElement(
          _reactNative.Text,
          { style: this.props.daysStyle, __source: {
              fileName: _jsxFileName,
              lineNumber: 162
            }
          },
          this.leadingZeros(countDown.days) + days
        ) : null,
        this.props.isHours ? null : _react2.default.createElement(
          _reactNative.Text,
          { style: this.props.hoursStyle, __source: {
              fileName: _jsxFileName,
              lineNumber: 163
            }
          },
          this.leadingZeros(countDown.hours)
        ),
        this.props.isHours ? null : _react2.default.createElement(
          _reactNative.Text,
          { style: this.props.firstColonStyle, __source: {
              fileName: _jsxFileName,
              lineNumber: 164
            }
          },
          ':'
        ),
        _react2.default.createElement(
          _reactNative.Text,
          { style: this.props.minsStyle, __source: {
              fileName: _jsxFileName,
              lineNumber: 165
            }
          },
          this.leadingZeros(countDown.min)
        ),
        _react2.default.createElement(
          _reactNative.Text,
          { style: this.props.secondColonStyle, __source: {
              fileName: _jsxFileName,
              lineNumber: 166
            }
          },
          ':'
        ),
        _react2.default.createElement(
          _reactNative.Text,
          { style: this.props.secsStyle, __source: {
              fileName: _jsxFileName,
              lineNumber: 167
            }
          },
          this.leadingZeros(countDown.sec)
        )
      );
    }
  }, {
    key: 'stop',
    value: function stop() {
      clearInterval(this.interval);
    }
  }, {
    key: 'leadingZeros',
    value: function leadingZeros(num) {
      var length = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;


      var length_ = length;
      var num_ = num;
      if (length_ === null) {
        length_ = 2;
      }
      num_ = String(num_);
      while (num_.length < length_) {
        num_ = '0' + num_;
      }
      return num_;
    }
  }]);
  return CountDown;
}(_react.Component);

CountDown.defaultProps = {
  date: new Date(),
  days: {
    plural: '天',
    singular: '天'
  },
  hours: ':',
  mins: ':',
  segs: ':',
  onEnd: function onEnd() {},

  containerStyle: styles.container,
  daysStyle: styles.defaultTime,
  hoursStyle: styles.defaultTime,
  minsStyle: styles.defaultTime,
  secsStyle: styles.defaultTime,
  firstColonStyle: styles.defaultColon,
  secondColonStyle: styles.defaultColon };
;

exports.default = CountDown;