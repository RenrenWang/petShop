Object.defineProperty(exports, "__esModule", {
    value: true
});

var Tool = function () {
    function Tool() {
        babelHelpers.classCallCheck(this, Tool);
    }

    babelHelpers.createClass(Tool, null, [{
        key: 'makeCancelable',
        value: function makeCancelable(promise) {
            var hasCanceled_ = false;
            var wrappedPromise = new Promise(function (resolve, reject) {
                promise.then(function (val) {
                    return hasCanceled_ ? reject({ isCanceled: true }) : resolve(val);
                });
                promise.catch(function (error) {
                    return hasCanceled_ ? reject({ isCanceled: true }) : reject(error);
                });
            });
            return {
                promise: wrappedPromise,
                cancel: function cancel() {
                    hasCanceled_ = true;
                }
            };
        }
    }, {
        key: 'format',
        value: function format(fmt, n) {

            var date = new Date(fmt);
            var y = date.getFullYear();
            var m = date.getMonth() + 1;
            m = m < 10 ? '0' + m : m;
            var d = date.getDate();
            d = d < 10 ? '0' + d : d;
            var h = date.getHours();
            h = h < 10 ? '0' + h : h;
            var minute = date.getMinutes();
            var second = date.getSeconds();
            minute = minute < 10 ? '0' + minute : minute;
            second = second < 10 ? '0' + second : second;
            return n ? y + '-' + m + '-' + d : y + '-' + m + '-' + d + ' ' + h + ':' + minute + ':' + second;
        }
    }, {
        key: 'fileName',
        value: function fileName(url) {
            return url.split("/").pop();
        }
    }]);
    return Tool;
}();

exports.default = Tool;